rule grammar
  ws rules:rdef* { rules.flatten.join("\n") }
end

rule rdef
  ( :name / param_open :name params:name* param_close ) :form {
    content = begin
      form.generate rule_name: name, value: :implicit
    rescue IllegalAtCaptureError
      "<fixme rule>"
    end
    rules = [
      $rule_replacements[name] ||
      "rule #{name}#{params.empty? ? "" : "[#{params.map{ |p| "%#{p}" }.join(', ')}]"}\n#{content.indent}\nend\n"
    ]
    rules.concat $additional_rules
    $additional_rules.clear
    rules
  }
end

rule form
  param_open (
    range / one_of /
    seq / or / opt / except /
    rep / rep1 / until /
    call / arg /
    make / string / yield /
    new_mark_scope / mark / is_marked / add_mark_scope /
    enter_mode / leave_mode / not_in_mode / only_in_mode /
    error / return / again / location / postpone_rest_of_line /
    capture
  ) param_close /
  str:string_literal { Value.new "\"#{str}\"" } /
  variable /
  :name { Value.new name }
end

rule variable
  (
    name:[0-9] { Value.new "%#{name}" } /
    '@' <AtValue>
  ) word_end ws
end

rule capture
  name:[0-9] word_end :form <Capture> /
  '@' word_end :form <AtCapture>
end

rule string_literal
  '"' @:( '\\' . / [^"] )* '"' ws
end

rule range
  'range' word_end b:char e:char { Value.new "[#{b}-#{e}]" }
end

rule one_of
  'one-of' word_end chars:string_literal { Value.new "[#{chars}]" }
end

rule seq
  'seq' word_end forms:form* <Seq>
end

rule or
  'or' word_end forms:form* <Or>
end

rule opt
  'opt' word_end forms:form* <Opt>
end

rule except
  'except' word_end forms:form* { SimpleNode.new "!<form>", forms.seq }
end

rule rep
  'rep' word_end forms:form* <Rep>
end

rule rep1
  'rep1' word_end forms:form* <Rep1>
end

rule until
  'until' word_end until_cond:form repeat:form <Until>
end

rule call
  'call' word_end :name forms:form* <Call>
end

rule arg
  'arg' word_end :name { Value.new "%#{name}" }
end

rule make
  'make' word_end (
    'nil' { Value.new "()" } /
    'cons' word_end head:form tail:form { Seq.new forms: [SimpleNode.new("head:<form>", head, true), SimpleNode.new("tail:<form>", tail, true)] } /
    :name forms:form* <Make>
  )
end

rule string
  'string' word_end forms:form* { forms.seq }
end

rule yield
  'yield' word_end :form { form }
end

rule new_mark_scope
  'new-mark-scope' word_end :form { SimpleNode.new "$new_mark_scope[<form>]", form }
end

rule mark
  'mark' word_end :form { SimpleNode.new "$mark[<form>]", form }
end

rule is_marked
  'is-marked' word_end :form { SimpleNode.new "$is_marked[<form>]", form }
end

rule add_mark_scope
  'add-mark-scope' word_end :form { SimpleNode.new "$add_mark_scope[<form>]", form }
end

rule enter_mode
  'enter-mode' word_end :name :form { SimpleNode.new "$enter_mode[\"#{name}\", <form>]", form }
end

rule leave_mode
  'leave-mode' word_end :name :form { SimpleNode.new "$leave_mode[\"#{name}\", <form>]", form }
end

rule not_in_mode
  'not-in-mode' word_end :name :form { SimpleNode.new "!$in_mode[\"#{name}\"] <form>", form }
end

rule only_in_mode
  'only-in-mode' word_end :name :form { SimpleNode.new "$in_mode[\"#{name}\"] <form>", form }
end

rule error
  'error' word_end :form msg:string_literal { SimpleNode.new "( <form> $error[\"#{msg}\"] )?", form }
end

rule return
  'return' word_end str:string_literal { Value.new "\"#{str}\"" }
end

rule again
  'again' word_end :form { Value.new "$match[#{form.value}]" }
end

rule location
  'location' word_end :form { form } # TODO
end

rule postpone_rest_of_line
  'postpone-rest-of-line' word_end :form { Value.new "" } # TODO
end

rule param_open
  '(' ws
end

rule param_close
  ')' ws
end

rule name
  str:word_char+ ws { str.gsub("-", "_") }
end

rule word_end
  !( word_char ) ws
end

rule word_char
  [a-zA-Z0-9_\-]
end

rule char
  '?' @:( '\\x' hex hex / . ) ws
end

rule hex
  [0-9a-f]
end

rule ws
  ( [ \t\n\r] / line_comment )*
end

rule line_comment
  ';;' [^\n]*
end
